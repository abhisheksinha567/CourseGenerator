WEBSITES FOR PROMPTS
___________________________________________________
1. AI FOR WORK
2. https://www.smscountry.com/blog/ai-prompts-sms/



REFERENCE WEBSITES

1. wisdolia.in
2. coursebox.ai
3. https://codecanyon.net/item/ai-course-generator-text-to-course-saas-ai-video-image-content-payment-earn-gemini-react-admin/51342965


Resources:-

1. Google gemini 1.0, gpt4lora, open source models(indicbert, marianmt), langchain
2. GitHub se code nikalna hai -> course generator, multilingual translation( ) ,  chatbot 
3. Articles  -> Medium, etc. 
4. Dialogflow, IBM Watson, chatbots 
5. 


STEPS:-

1. User will upload a PDF.
2. User will be allowed to select a language.
3. User will be given options:-

		1. Lesson Plan / Modules/ Flashcards
		2. MCQ
		3. Short Answer Questions
		4. Fill in the blanks/  /  / / /  /
		5. Chatbot
		6. True and false
		7. Descriptive ya long answer questions
		8. 


minimum 3 exercise questions
1 lesson plan/ module/ flashcards
AI Curriculum, AI assessment




EXPERT RECOMMENDATION


1. User retention period  -> 10 secs
2. Processing time -> drastic reduction 
3. Modularization 
4. Time reduction 
5. Prompt engineering
6. Advanced Techniques
7. Deployment level practices
8. 
9.
10.
11.
12.

this function i found on chat gpt regarding asssessment and evaluation
@app.route('/generate_assessment', methods=['POST'])
def generate_assessment():
    file = request.files['pdf']
    text = extract_text_from_pdf(file)
    text_chunks = split_text_into_chunks(text)

    mcq_questions = []
    fill_in_the_blank_questions = []
    short_answer_questions = []

    for chunk in text_chunks:
        prompts = create_prompts(chunk)
        mcq_questions.append(generate_questions(prompts['mcq']))
        fill_in_the_blank_questions.append(generate_questions(prompts['fill_in_the_blank']))
        short_answer_questions.append(generate_questions(prompts['short_answer']))

    return jsonify({
        'mcq_questions': mcq_questions,
        'fill_in_the_blank_questions': fill_in_the_blank_questions,
        'short_answer_questions': short_answer_questions
    })

@app.route('/evaluate_assessment', methods=['POST'])
def evaluate_assessment():
    user_answers = request.json.get('user_answers')
    correct_answers = request.json.get('correct_answers')

    evaluation = {
        'mcq': {
            'total': len(correct_answers['mcq']),
            'correct': sum(1 for ua, ca in zip(user_answers['mcq'], correct_answers['mcq']) if ua == ca)
        },
        'fill_in_the_blank': {
            'total': len(correct_answers['fill_in_the_blank']),
            'correct': sum(1 for ua, ca in zip(user_answers['fill_in_the_blank'], correct_answers['fill_in_the_blank']) if ua == ca)
        },
        'short_answer': {
            'total': len(correct_answers['short_answer']),
            'correct': sum(1 for ua, ca in zip(user_answers['short_answer'], correct_answers['short_answer']) if ua.strip().lower() == ca.strip().lower())
        }
    }

    return jsonify(evaluation)

if __name__ == '__main__':
    app.run(debug=True)
